sc_node_norole_relation -> nrel_friend_function_cpp;;
sc_node_norole_relation -> nrel_class_member;;
sc_node_role_relation -> rrel_access_mod_private;;
sc_node_role_relation -> rrel_access_mod_protected;;

nrel_friend_function_cpp

=> nrel_main_idtf:
		[c++ friend function]
	    (* <- lang_en;; *);
	=> nrel_main_idtf:
	    [с++ дружественная функция]
	    (* <- lang_ru;; *);

<- arity : binary_relation;
=> nrel_second_domain : concept_function;
=> nrel_first_domain : concept_class;;

definition ->...
(*
	-> rrel_key_sc_element : nrel_friend_function_cpp;;
	<= nrel_sc_text_translation: ...(*->rrel_example:[Дружественная функция — это функция, которая не является членом класса, но имеет доступ 														к членам класса, объявленным в полях private или protected](*<-lang_ru;;*);;*);;
	=> nrel_main_idtf: [Определение (дружественная функция)](*<- lang_ru;;*);;
	=> nrel_using_constants:
	{
		concept_function;
		nrel_class_member;
		rrel_access_mod_private;
		rrel_access_mod_protected
	};;
*);;

statement ->...
(*
	-> rrel_key_sc_element : nrel_friend_function_cpp;;
	<= nrel_sc_text_translation: ...(*->rrel_example:[Функция может использоваться, как дружественная к нескольким классам.](*<-lang_ru;;*);;*);;
	=> nrel_main_idtf: [Утверждение(дружественная функция)](*<- lang_ru;;*);;
	=> nrel_using_constants:
	{
		concept_class;
		concept_function
	};;
*);;


