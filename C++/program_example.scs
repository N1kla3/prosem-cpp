sc_node_not_relation -> mainCpp(*<-programm_file_cpp;;*);;
ll => nrel_macro_cpp : concept_long_long;;
concept_file -> {iostream; vector; algorithm};;
mainCpp=>nrel_using_namespace : std;;
mainCpp=>nrel_include_cpp:{iostream;vector;algorithm};;

concept_namespace -> my
(* <= nrel_inclusion : mainCpp;;
	=> nrel_list_of_operators : ..my_list_operators
	(*
		<- sc_node_not_relation;;
		->eNums
		(*
			<- concept_enum;;
			=> nrel_enum_elem : {
				ZERO(*<- concept_variable;;*);
				ONE(*<- concept_variable;;*)				
			};;			
		*);;
		-> GLOBAL
		(*
			<- concept_variable;;
 			=> nrel_modificator:concept_const;;
			=> nrel_datatype : concept_int;;
			=>nrel_assignment:[5];;
		*);;
		-> func
		(*
			<- concept_function;;
			=>nrel_return_type:concept_int;;
		*);;
		-> funcPrint
		(*
			<- concept_function;;
			=>nrel_return_type:concept_void;;
		*);;
		-> Fruit
		(*
			<- concept_class;;
			->c_Fruit(*<- concept_constructor;;=> nrel_modificator:{
							concept_public;concept_default};;*);;
			=> rrel_virtual_method:justVirtual
			(*
				<-concept_function;;
				=> nrel_modificator:{concept_noexcept;concept_public};;
				=>nrel_return_type:concept_int;;
				=>function_body:...
				(*	
					<- concept_codeblock;;
					=> return_value:[5];;
				*);;
			*);;
			=> rrel_pure_virtual_method:getInfo
			(*
				<-concept_function;;
				=> nrel_modificator:concept_public;;
				=>nrel_return_type:concept_void;;
			*);;
		*);;
		-> Apple
		(*
			<- concept_class;;
			=> nrel_protected_inherit:Fruit;;
			=> nrel_field:appleValue(*=>nrel_datatype:concept_float;;
					=>nrel_modificator:concept_public;;*);;
			->c_Apple
			(*
				<- concept_constructor;;
				=> nrel_modificator:concept_public;;
				<-...(*<-concept_function_body;;
				=>rrel_call_inherit_constructor:c_Fruit;;
				->appleValue(*=> nrel_assign:3.5f;;*);;*);;
			*);;
			=> rrel_method:getAppleValue 	
			(*
				<-concept_function;;
				=> nrel_modificator:{concept_const;concept_protected};;
				=>nrel_return_type:concept_int;;
				=>concept_function_body:...
				(*
					<- concept_codeblock;;
					=> return_value:...(*<=nrel_type_casting:appleValue;;
							<=nrel_datatype:concept_int;;*);;
				*);;
			*);;
			=> rrel_overriding:getInfo
			(*	
				=>overrided_body:Apple_getInfo(*<- concept_codeblock;;
				=> nrel_modificator:concept_public;;
				=>nrel_call_function:cout(*=>nrel_argument:[Apple];;*);;*);;
			*);;
		*);;
		-> Orange
		(*
			<- concept_class;;
			=> nrel_inherit:Fruit;;
			=> nrel_field:orangeField(*=>nrel_datatype:concept_int;;
					=>nrel_modificator:concept_private;;*);;
			->c_Orange
			(*
				<- concept_constructor;;
				=> nrel_modificator:concept_protected;;
				<-...(*<-concept_function_body;;
				=>rrel_call_inherit_constructor:c_Fruit;;
				->orangeField(*=> nrel_assign:[6];;*);;*);;
			*);;
			=> rrel_method:OrangeFunc 	
			(*
				<-concept_function;;
				=> nrel_parametr: num(*<- concept_variable;; => nrel_datatype: concept_int;;*);;
				=> nrel_modificator:{concept_const;concept_protected};;
				=>nrel_return_type:concept_int;;
				=>function_body:...
				(*
					<- concept_codeblock;;
					=> return_value:...(*<= call_function:...(*<- operator_multi;;
						=>nrel_argument:{num;orangeField};;*);;*);;
				*);;
			*);;
			=> rrel_overriding:getInfo
			(*	
				=>overrided_body:Orange_getInfo(*<-concept_codeblock;;
				=> nrel_modificator:concept_public;;
				=>call_function:...(*<- operator_left_shift;;=>nrel_argument:{[Orange];cout};;*);;*);;
			*);;
		*);;
		-> Mutant
		(*
			<- concept_class;;
			=> nrel_virtual_inherit:{Apple; Orange};;
			=> nrel_field:var(*=>nrel_datatype:concept_int;;
					=>nrel_modificator:concept_private;;*);;
			->c_Mutant
			(*
				<- concept_constructor;;
				=> concept_parametr:..var(*<- concept_reference;;=> nrel_modificator:concept_const;;*);;
				=> nrel_modificator:{concept_private; concept_explicit};;
				<-...(*<-concept_function_body;;
				=>rrel_call_inherit_constructor:{c_Orange; c_Apple};;
				->Mutant_this(*<- concept_this;;=> call_field: var(*=> nrel_assign:..var;;*);;*);;*);;
			*);;
			->getSmth
			(*
				<- concept_function_template;;=>nrel_template_parametr:T;;
				=>nrel_reference_parametr:obj(*<-concept_reference;;*);;
				=> nrel_modificator:concept_private;;
				=> nrel_pointer_return_type:T;;
				=>function_body:...(*=>return_value:obj;;*);;
			*);;
			=> rrel_method:getBoth 	
			(*
				<-concept_function;;
				=> nrel_modificator:{concept_const;concept_private;concept_inline};;
				=>nrel_return_type:concept_int;;
				=>function_body:...
				(*
					-> ..a(*<- concept_variable;; => nrel_datatype:concept_int;;
						=> nrel_assignment:...(*<=call_function:...(*<-OrangeFunc(*=>nrel_argument:3;;*);;*);;*);;*);;
					-> ..b(*<- concept_variable;; => nrel_datatype:concept_int;;
						=> nrel_assignment:...(*<=call_function:...(*<-getAppleValue;;*);;*);;*);;
					=> return_value:...(*<=call_function:...(*<- operator_plus;;=> nrel_argument:{..a;..b};;*);;*);;
				*);;
			*);;
			=> rrel_overriding:getInfo
			(*	
				<=overrided_body:...(*<- concept_codeblock;;
				=> nrel_modificator:concept_private;;
				=>call_function:...(*<- operator_left_shift;;=>nrel_argument:{[Mutant];cout};;*);;*);;
			*);;
		*);;
		-> myStatic
		(*
			<- concept_template_class_cpp;;
			=>nrel_template_parametr:T;;
			<- myException(*<- concept_class;;<= nrel_public_inherit:exception
			(*<=nrel_operator:std(*<-concept_namespace;;*);;*);;=>nrel_modificator:concept_public;;*);;
			=> rrel_method:getVar
			(*
				=> nrel_modificator:{concept_static;concept_noexcept};;
				=> nrel_return_type:concept_int;;
				=> nrel_parametr:
				{
					obj(*=>nrel_datatype:concept_int;;<- concept_variable;;*);
					num(*<-concept_variable;;=>nrel_instantiation:T;;*)
				};;
			=> function_body:...
			(*
				<- concept_codeblock;;
				<- ..var
				(*=> nrel_datatype: concept_int;;<- concept_variable;;=> nrel_assignment:num(*<= concept_variable;;*);;*);;
				<-...
				(*
					<- for_operator;;
					=> nrel_for_counter:i(*<- concept_variable;;=>nrel_assignment:[0];;*);;
					=> nrel_for_step:i(*=>nrel_assignment:...(*<= call_function:...(*<-operator_increment;;
							=>nrel_argument:i;;*);;*);;*);;
					=> nrel_cycle_border:...(*<= nrel_call_function:less_then(*=>argument:{i;[10]};;*);;*);;
					=>cycle_body:...
					(*	
						<- concept_codeblock;;
						<-..var(*=>nrel_assignment:...(*<= call_function:...(*<-operator_increment;;
							=>nrel_argument:..var;;*);;*);;*);;
						=> if_operator:...
						(*
							=>nrel_statement:..var(*=>less_then:[10];;*);;
							->if_body:...(*<- concept_codeblock;;
							->..var(*=>nrel_assignment:...(*<= call_function:...(*<-operator_decrement;;
								=>nrel_argument:..var;;*);;*);;*);;*);;
							=>nrel_else_operator:...(*
								<- if_operator(*
								=>nrel_statement:..var(*=>equals:[10];;*);;
								->if_body:...(*<- concept_codeblock;;
								->..var(*=>nrel_assignment:...(*<= call_function:...(*<-operator_decrement;;
									=>nrel_argument:..var;;*);;*);;*);;*);;
								=>nrel_throw:myException;;
								=>nrel_else_operator:...(*<-concept_codeblock;;
									->..var(*=>nrel_assignment:...(*<= call_function:...
									(*<-operator_increment;;=>nrel_argument:..var;;*);;*);;*);;*);;
							*);;
						*);;
					*);;
				*);;
				=>return_value:...(*<= nrel_value:..var;;*);;	*);;			
			*);;
			*);;
		*);;
	*);;
*);;


