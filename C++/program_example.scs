//#include <iostream>
//#include <vector>
//#include <algorithm>
//#define ll long long
//using namespace std;

sc_node_not_relation -> mainCpp(*<-programm_file_cpp;;*);;
ll => nrel_macro_cpp : concept_long_long;;
concept_file -> {iostream; vector; algorithm};;
mainCpp=>nrel_using_namespace : std;;
mainCpp=>nrel_include_cpp:{iostream;vector;algorithm};;


//namespace my {

concept_namespace -> my
(* <= nrel_inclusion : mainCpp;;
	=> nrel_list_of_operators : ..my_list_operators
	(*
		<- sc_node_not_relation;;

		//enum eNums{ZERO, ONE};
		->eNums
		(*
			<- concept_enum;;
			=> nrel_enum_elem : {
				ZERO(*<- concept_variable;;*);
				ONE(*<- concept_variable;;*)
			};;
		*);;

		//const int GLOBAL = 5;
		-> GLOBAL
		(*
			<- concept_variable;;
 			=> nrel_modificator:concept_const;;
			=> nrel_datatype : concept_int;;
			=>nrel_assignment:[5];;
		*);;
		//int func();
		-> func
		(*
			<- concept_function;;
			=>nrel_return_type:concept_int;;
		*);;
		//void funcPrint();
		-> funcPrint
		(*
			<- concept_function;;
			=>nrel_return_type:concept_void;;
		*);;

		//class Fruit {
        //    public:
        //        Fruit() = default;
        //
        //        virtual int justVirtual()noexcept {
        //            return 5;
        //        }
        //
        //        virtual void getInfo() = 0;
        //    };
		-> Fruit
		(*
			<- concept_class;;
			->c_Fruit(*<- concept_constructor;;=> nrel_modificator:
				concept_default;;
				=> nrel_access_modificator:concept_public;;*);;
			=> rrel_virtual_method:justVirtual
			(*
				<-concept_function;;
				=> nrel_modificator:concept_noexcept;;
				=> nrel_access_modificator:concept_public;;
				=>nrel_return_type:concept_int;;
				=>function_body:...
				(*
					<- concept_codeblock;;
					->rrel_1:...(*=> return_value:[5];;*);;
				*);;
			*);;
			=> rrel_pure_virtual_method:getInfo
			(*
				<-concept_function;;
				=> nrel_access_modificator:concept_public;;
				=>nrel_return_type:concept_void;;
			*);;
		*);;

		//class Apple : protected Fruit {
        //        float appleValue;
        //    public:
        //        Apple()
        //                : Fruit() {
        //            appleValue = 3.5f;
        //        }
        //    protected:
        //        int getAppleValue()const{
        //            return (int)appleValue;
        //        }
        //    public:
        //        virtual void getInfo() override {
        //            cout << "Apple";
        //        }
        //    };
		-> Apple
		(*
			<- concept_class;;
			=> nrel_protected_inherit:Fruit;;
			=> nrel_field:appleValue(*=>nrel_datatype:concept_float;;
					=>nrel_access_modificator:concept_public;;*);;
			->c_Apple
			(*
				<- concept_constructor;;
				=> nrel_access_modificator:concept_public;;
				=>concept_function_body:...
				(*
					<-concept_codeblock;;
					=>rrel_call_inherit_constructor:c_Fruit;;
					->rrel_1:appleValue(*=> nrel_assign:3.5f;;*);;
				*);;
			*);;
			=> rrel_method:getAppleValue
			(*
				<-concept_function;;
				=> nrel_modificator:concept_const;;
				=> nrel_access_modificator:concept_protected;;
				=>nrel_return_type:concept_int;;
				=>concept_function_body:...
				(*
					<- concept_codeblock;;
					->rrel_1:...(*=> return_value:...(*<=nrel_type_casting:appleValue;;
							<=nrel_datatype:concept_int;;*);;*);;
				*);;
			*);;
			=> rrel_overriding:getInfo
			(*
				=>overrided_body:Apple_getInfo(*<- concept_codeblock;;
					=> nrel_access_modificator:concept_public;;
					->rrel_1:...(*=>nrel_call_function:cout(*=>call_function:...(*<- operator_left_shift;;
							=>nrel_argument:...(*->rrel_1:[Apple];;->rrel_2:cout;;*);;*);;*);;*);;*);;
			*);;
		*);;

		//class Orange : public Fruit {
        //        int orangeField;
        //
        //    protected:
        //        Orange()
        //                : Fruit() {
        //            orangeField = 6;
        //        }
        //
        //    public:
        //        virtual void getInfo() override {
        //            cout << "Orange";
        //        }
        //
        //    protected:
        //        int OrangeFunc(int num) const{
        //            return num * orangeField;
        //        }
        //    };

		-> Orange
		(*
			<- concept_class;;
			=> nrel_inherit:Fruit;;
			=> nrel_field:orangeField(*=>nrel_datatype:concept_int;;
					=>nrel_access_modificator:concept_private;;*);;
			->c_Orange
			(*
				<- concept_constructor;;
				=> nrel_access_modificator:concept_protected;;
				<-...(*<-concept_function_body;;
				=>rrel_call_inherit_constructor:c_Fruit;;
				->orangeField(*=> nrel_assign:[6];;*);;*);;
			*);;
			=> rrel_method:OrangeFunc
			(*
				<-concept_function;;
				=> nrel_parametr: ...(*->rrel_1:num(*<- concept_variable;; => nrel_datatype: concept_int;;*);;*);;
				=> nrel_modificator:concept_const;;
				=>nrel_access_modificator:concept_protected;;
				=>nrel_return_type:concept_int;;
				=>function_body:...
				(*
					<- concept_codeblock;;
					->rrel_1:...(*=> return_value:...(*<= call_function:...(*<- operator_multi;;
						=>nrel_argument:...(*->rrel_1:num;;->rrel_2:orangeField;;*);;*);;*);;*);;
				*);;
			*);;
			=> rrel_overriding:getInfo
			(*
				=>overrided_body:Orange_getInfo(*<-concept_codeblock;;
				=> nrel_access_modificator:concept_public;;
				->rrel_1:...(*=>call_function:...(*<- operator_left_shift;;
					=>nrel_argument:...(*->rrel_1:[Orange];;->rrel_2:cout;;*);;*);;*);;*);;
			*);;
		*);;

		//class Mutant : virtual Apple, Orange {
        //        int var;
        //        explicit Mutant(const int &var)
        //                : Apple(), Orange() {
        //            this->var = var;
        //        }
        //
        //        virtual void getInfo() override {
        //            cout << "Mutant";
        //        }
        //
        //        template<class T>
        //        T* getSmth(T &obj){
        //            return obj;
        //        }
        //
        //        inline int getBoth() const{
        //            int a = OrangeFunc(3);
        //            int b = getAppleValue();
        //            return a+b;
        //        }
        //
        //    };
		-> Mutant
		(*
			<- concept_class;;
			=> nrel_virtual_inherit:{Apple; Orange};;
			=> nrel_field:var(*=>nrel_datatype:concept_int;;
					=>nrel_access_modificator:concept_private;;*);;
			->c_Mutant
			(*
				<- concept_constructor;;
				=> concept_parametr:...(*->rrel_1:..var(*<- concept_reference;;=> nrel_modificator:concept_const;;*);;*);;
				=> nrel_modificator:concept_explicit;;
				=> nrel_access_modificator:concept_private;;
				<-concept_function_body:...
				(*
					<-concept_codeblock;;
					=>rrel_call_inherit_constructor:{c_Orange; c_Apple};;
					->rrel_1:...(*->Mutant_this(*<- concept_this;;=> call_field: var(*=> nrel_assign:..var;;*);;*);;*);;
				*);;
			*);;
			->getSmth
			(*
				<- concept_function_template;;=>nrel_template_parametr:T;;
				=>nrel_parametr:...(*->rrel_1:obj(*<-concept_reference;;*);;*);;
				=> nrel_access_modificator:concept_private;;
				=> nrel_pointer_return_type:T;;
				=>function_body:...(*=>return_value:obj;;*);;
			*);;
			=> rrel_method:getBoth
			(*
				<-concept_function;;
				=> nrel_modificator:{concept_const;concept_inline};;
				=> nrel_access_modificator:concept_private;;
				=>nrel_return_type:concept_int;;
				=>function_body:...
				(*
					<- concept_codeblock;;
					-> rrel_1:..a(*<- concept_variable;; => nrel_datatype:concept_int;;
						=> nrel_assignment:...(*<=call_function:...
						(*<-OrangeFunc(*=>nrel_argument:...(*->rrel_1:[3];;*);;*);;*);;*);;*);;
					-> rrel_2:..b(*<- concept_variable;; => nrel_datatype:concept_int;;
						=> nrel_assignment:...(*<=call_function:...
						(*<-getAppleValue;;*);;*);;*);;
					->rrel_3:...(*=> return_value:...(*<=call_function:...
						(*<- operator_plus;;=> nrel_argument:...(*->rrel_1:..a;;->rrel_2:..b;;*);;*);;*);;*);;
				*);;
			*);;
			=> rrel_overriding:getInfo
			(*
				<=overrided_body:...(*<- concept_codeblock;;
				=> nrel_access_modificator:concept_private;;
				->rrel_1:...(*=>call_function:...(*<- operator_left_shift;;=>nrel_argument:{[Mutant];cout};;*);;*);;*);;
			*);;
		*);;

		//template<class T>
        //    class myStatic{
        //    public:
        //        class myException : public std::exception{};
        //        static int getVar(T obj, int num)noexcept(false){
        //            int var = num;
        //            for(int i = 0; i < 10; ++i){
        //                var++;
        //                if(var < 10){
        //                    var--;
        //                }else if(var == 10){
        //                    throw myException();
        //                }else{
        //                    var++;
        //                }
        //            }
        //                return var;
        //        }
        //    };
		-> myStatic
		(*
			<- concept_template_class_cpp;;
			=>nrel_template_parametr:T;;
			<- myException(*<- concept_class;;<= nrel_public_inherit:exception
			(*<=nrel_operator:std(*<-concept_namespace;;*);;*);;=>nrel_access_modificator:concept_public;;*);;
			=> rrel_method:getVar
			(*
				=> nrel_modificator:{concept_static;concept_noexcept};;
				=> nrel_return_type:concept_int;;
				=> nrel_parametr:...
				(*
					->rrel_1:obj(*=>nrel_datatype:concept_int;;<- concept_variable;;*);;
					->rrel_2:num(*<-concept_variable;;=>nrel_instantiation:T;;*);;
				*);;
			=> function_body:...
			(*
				<- concept_codeblock;;
				->rrel_1:..var
				(*=> nrel_datatype: concept_int;;<- concept_variable;;=> nrel_assignment:num(*<= concept_variable;;*);;*);;
				->rrel_2:...
				(*
					<- for_operator;;
					=> nrel_for_counter:i(*<- concept_variable;;=>nrel_assignment:[0];;*);;
					=> nrel_for_step:i(*=>nrel_assignment:...(*<= call_function:...(*<-operator_increment;;
							=>nrel_argument:...(*->rrel_1:i;;*);;*);;*);;*);;
					=> nrel_cycle_border:...(*<= nrel_call_function:less_then(*=>argument:{i;[10]};;*);;*);;
					=>cycle_body:...
					(*
						<- concept_codeblock;;
						->rrel_1:..var(*=>nrel_assignment:...(*<= call_function:...(*<-operator_increment;;
							=>nrel_argument:...(*->rrel_1:..var;;*);;*);;*);;*);;
						->rrel_2:...(*=> if_operator:...
						(*
							=>nrel_statement:..var(*=>less_then:[10];;*);;
							->if_body:...
							(*<- concept_codeblock;;
								->rrel_1:..var(*=>nrel_assignment:...(*<= call_function:...
									(*<-operator_decrement;;
									=>nrel_argument:...(*->rrel_1:..var;;*);;*);;*);;*);;
							*);;
							=>nrel_else_operator:...(*
								->rrel_1:...(*=> if_operator:...(*
								=>nrel_statement:..var(*=>equals:[10];;*);;
								=>if_body:...
								(*<- concept_codeblock;;
									->rrel_1:...(*=>nrel_throw:myException;;*);;
								*);;
								=>nrel_else_operator:...
								(*<-concept_codeblock;;
									->rrel_1:..var(*=>nrel_assignment:...(*<= call_function:...
									(*<-operator_increment;;
									=>nrel_argument:...(*->rrel_1:..var;;*);;*);;*);;*);;
								*);;
							*);;
						*);;*);;*);;
					*);;
				*);;
				->rrel_3:...(*=>return_value:...(*<= nrel_value:..var;;*);;*);;	*);;
			*);;
			*);;
		*);;
	*);;
*);;


